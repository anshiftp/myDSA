class Solution {
public:
    int search(vector<int>& nums, int target) {
        // Initialize two pointers: low (start of the array) and high (end of the array)
        int low = 0, high = nums.size() - 1;
        
        // Continue searching while there are elements to check
        while (low <= high) {
            // Calculate the middle index in a way that prevents integer overflow
            int mid = low + (high - low) / 2;
            
            // Check if the middle element is the target
            if (nums[mid] == target) {
                return mid; // Target found, return its index
            } 
            // If the target is greater than the middle element,
            // narrow the search to the right half of the array
            else if (nums[mid] < target) {
                low = mid + 1;
            } 
            // If the target is less than the middle element,
            // narrow the search to the left half of the array
            else {
                high = mid - 1;
            }
        }
        
        // If the loop ends without finding the target, return -1
        return -1;
    }
};
